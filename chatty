<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Chatty - Мессенджер</title>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <style>
        :root {
            --primary-color: #6a5acd;
            --primary-dark: #483d8b;
            --primary-light: #9370db;
            --text-color: #333;
            --bg-color: #f5f5f5;
            --white: #ffffff;
            --gray: #e0e0e0;
            --gray-dark: #a0a0a0;
            --success: #4caf50;
            --error: #f44336;
            --bg-secondary: #ffffff;
            --border-color: #e0e0e0;
            --message-received-bg: #ffffff;
            --message-sent-bg: #6a5acd;
            --header-bg: #6a5acd;
            --text-secondary: #666666;
        }

        [data-theme="dark"] {
            --text-color: #ffffff;
            --bg-color: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --white: #2d2d2d;
            --gray: #404040;
            --gray-dark: #666666;
            --border-color: #404040;
            --message-received-bg: #404040;
            --message-sent-bg: #6a5acd;
            --header-bg: #483d8b;
            --text-secondary: #cccccc;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            height: 100vh;
            overflow: hidden;
            touch-action: manipulation;
            transition: background-color 0.3s, color 0.3s;
        }

        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 100%;
            margin: 0 auto;
            background-color: var(--bg-secondary);
            position: relative;
            transition: background-color 0.3s;
        }

        /* Авторизация */
        .auth-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            padding: 20px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: var(--white);
        }

        .auth-form {
            background-color: var(--bg-secondary);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 350px;
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }

        .auth-form h2 {
            margin-bottom: 20px;
            text-align: center;
            color: var(--primary-color);
            font-size: 1.5rem;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 0.9rem;
            color: var(--text-color);
        }

        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
            background-color: var(--bg-secondary);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s, border-color 0.3s;
        }

        .btn {
            padding: 12px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.2s ease;
            user-select: none;
        }

        .btn:active {
            transform: scale(0.98);
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: var(--white);
            width: 100%;
        }

        .btn-primary:active {
            background-color: var(--primary-dark);
        }

        .auth-switch {
            text-align: center;
            margin-top: 20px;
        }

        .auth-switch a {
            color: var(--primary-color);
            text-decoration: none;
            cursor: pointer;
            font-weight: 500;
        }

        /* Основной интерфейс */
        .messenger-container {
            display: none;
            flex-direction: column;
            height: 100vh;
            position: relative;
        }

        .header {
            background-color: var(--header-bg);
            color: var(--white);
            padding: 12px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            min-height: 60px;
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header h1 {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .user-info {
            display: flex;
            align-items: center;
            position: relative;
        }

        .user-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 10px 0;
            min-width: 150px;
            z-index: 200;
            display: none;
        }

        .user-menu.active {
            display: block;
        }

        .user-menu-item {
            padding: 10px 15px;
            cursor: pointer;
            transition: background-color 0.2s;
            color: var(--text-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-menu-item:hover {
            background-color: var(--gray);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            font-weight: bold;
            font-size: 0.9rem;
            cursor: pointer;
        }

        .theme-toggle {
            background: none;
            border: none;
            color: var(--white);
            font-size: 1.2rem;
            cursor: pointer;
            margin-right: 15px;
            padding: 5px;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .connection-status {
            background: rgba(0, 0, 0, 0.3);
            padding: 4px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            margin-right: 10px;
        }

        .connection-status.connected {
            background: var(--success);
        }

        .connection-status.disconnected {
            background: var(--error);
        }

        .main-content {
            display: flex;
            flex: 1;
            overflow: hidden;
            height: calc(100vh - 60px);
        }

        .contacts-container {
            flex: 1;
            overflow-y: auto;
            background-color: var(--bg-secondary);
            -webkit-overflow-scrolling: touch;
            height: 100%;
        }

        .contact {
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .contact:active {
            background-color: var(--gray);
        }

        .contact.active {
            background-color: var(--primary-light);
            color: var(--white);
        }

        .contact-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background-color: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            font-weight: bold;
            color: var(--white);
            font-size: 1rem;
        }

        .contact-info {
            flex: 1;
        }

        .contact-name {
            font-weight: 500;
            font-size: 1rem;
            color: var(--text-color);
        }

        .contact-status {
            font-size: 0.8rem;
            color: var(--text-secondary);
            margin-top: 2px;
        }

        .chat-container {
            flex: 2;
            display: flex;
            flex-direction: column;
            border-left: 1px solid var(--border-color);
            height: 100%;
        }

        .chat-header {
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--bg-secondary);
            position: sticky;
            top: 0;
            z-index: 50;
            min-height: 70px;
        }

        .call-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-call {
            background-color: var(--primary-color);
            color: var(--white);
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            font-size: 1.1rem;
        }

        .btn-call:active {
            transform: scale(0.95);
        }

        .messages-container {
            flex: 1;
            padding: 10px 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            -webkit-overflow-scrolling: touch;
            background-color: var(--bg-color);
            min-height: 0;
        }

        .message {
            max-width: 85%;
            padding: 10px 14px;
            margin-bottom: 8px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            line-height: 1.4;
            font-size: 0.95rem;
        }

        .message.sent {
            align-self: flex-end;
            background-color: var(--message-sent-bg);
            color: var(--white);
            border-bottom-right-radius: 5px;
        }

        .message.received {
            align-self: flex-start;
            background-color: var(--message-received-bg);
            border: 1px solid var(--border-color);
            border-bottom-left-radius: 5px;
            color: var(--text-color);
        }

        .message-time {
            font-size: 0.7rem;
            margin-top: 4px;
            opacity: 0.7;
            text-align: right;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 4px;
            color: inherit;
        }

        .message-status {
            font-size: 0.7rem;
            opacity: 0.7;
        }

        .call-notification {
            background-color: var(--primary-color);
            color: var(--white);
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .call-notification:hover {
            background-color: var(--primary-dark);
        }

        .message-image {
            max-width: 100%;
            border-radius: 10px;
            margin-top: 5px;
            display: block;
        }

        .message-input-container {
            display: flex;
            padding: 12px 15px;
            background-color: var(--bg-secondary);
            align-items: center;
            gap: 10px;
            position: sticky;
            bottom: 0;
            min-height: 70px;
            border-top: 1px solid var(--border-color);
        }

        .message-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid var(--border-color);
            border-radius: 24px;
            outline: none;
            font-size: 16px;
            background-color: var(--bg-color);
            color: var(--text-color);
            min-height: 44px;
        }

        .btn-attach, .btn-send {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1.1rem;
            flex-shrink: 0;
        }

        .btn-attach:active, .btn-send:active {
            transform: scale(0.95);
        }

        /* Окно звонка */
        .call-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000;
            z-index: 1000;
            flex-direction: column;
            color: var(--white);
        }

        .remote-video-fullscreen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000;
            z-index: 1;
        }

        .remote-video-fullscreen video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .local-video-pip {
            position: absolute;
            top: 80px;
            right: 20px;
            width: 120px;
            height: 160px;
            border-radius: 10px;
            overflow: hidden;
            z-index: 2;
            border: 2px solid var(--white);
            cursor: move;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
            display: none;
        }

        .video-call .local-video-pip {
            display: block;
        }

        .local-video-pip video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .call-controls-overlay {
            position: absolute;
            top: 20px;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 15px;
            z-index: 3;
            padding: 0 20px;
        }

        .voice-call .call-controls-overlay .btn-switch-camera,
        .voice-call .call-controls-overlay .btn-quality {
            display: none;
        }

        .call-controls-overlay .call-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            font-size: 1.2rem;
            background-color: rgba(0, 0, 0, 0.5);
            color: var(--white);
            backdrop-filter: blur(10px);
        }

        .call-controls-overlay .call-btn:active {
            transform: scale(0.95);
        }

        .call-controls-overlay .btn-end-call {
            background-color: var(--error);
        }

        .quality-selector-overlay {
            position: absolute;
            top: 90px;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 8px;
            z-index: 3;
            padding: 0 20px;
            display: none;
        }

        .quality-menu-open .quality-selector-overlay {
            display: flex;
        }

        .quality-btn-overlay {
            padding: 8px 12px;
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            color: var(--white);
            cursor: pointer;
            font-size: 0.8rem;
            backdrop-filter: blur(10px);
        }

        .quality-btn-overlay.active {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .call-info-overlay {
            position: absolute;
            bottom: 100px;
            left: 0;
            width: 100%;
            text-align: center;
            z-index: 3;
            color: var(--white);
        }

        /* Уведомления */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 18px;
            background-color: var(--primary-color);
            color: var(--white);
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1100;
            display: none;
            max-width: 80%;
            font-size: 0.9rem;
        }

        /* Модальное окно */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1200;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--bg-secondary);
            padding: 20px;
            border-radius: 15px;
            width: 90%;
            max-width: 400px;
            text-align: center;
            color: var(--text-color);
        }

        .modal-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-direction: column;
        }

        .modal-btn {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
        }

        .btn-cancel {
            background-color: var(--gray);
            color: var(--text-color);
        }

        .btn-confirm {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .loading {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1300;
            justify-content: center;
            align-items: center;
            color: var(--white);
            font-size: 1.2rem;
        }

        @media (max-width: 600px) {
            .contacts-container {
                display: block;
            }
            
            .chat-container {
                display: none;
            }
            
            .chat-active .contacts-container {
                display: none;
            }
            
            .chat-active .chat-container {
                display: flex;
            }
            
            .back-button {
                display: flex;
                align-items: center;
                margin-right: 10px;
                font-size: 1.2rem;
                cursor: pointer;
            }
        }

        .back-button {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Экран авторизации -->
    <div class="container">
        <div class="auth-container" id="authContainer">
            <div class="auth-form">
                <h2 id="authTitle">Вход в Chatty</h2>
                <div class="form-group">
                    <label for="username">Имя пользователя</label>
                    <input type="text" id="username" placeholder="Введите имя пользователя">
                </div>
                <div class="form-group" id="passwordGroup">
                    <label for="password">Пароль</label>
                    <input type="password" id="password" placeholder="Введите пароль">
                </div>
                <div class="form-group" id="confirmPasswordGroup" style="display: none;">
                    <label for="confirmPassword">Подтвердите пароль</label>
                    <input type="password" id="confirmPassword" placeholder="Подтвердите пароль">
                </div>
                <button class="btn btn-primary" id="authButton">Войти</button>
                <div class="auth-switch">
                    <a id="authSwitch">Нет аккаунта? Зарегистрироваться</a>
                </div>
            </div>
        </div>

        <!-- Основной интерфейс -->
        <div class="messenger-container" id="messengerContainer">
            <div class="header">
                <div class="header-left">
                    <div class="back-button" id="backButton">←</div>
                    <h1>Chatty</h1>
                </div>
                <div class="user-info">
                    <div class="connection-status disconnected" id="connectionStatus">❌ Нет сети</div>
                    <button class="theme-toggle" id="themeToggle" title="Сменить тему">🌙</button>
                    <div class="user-avatar" id="userAvatar">U</div>
                    <span id="userName">Пользователь</span>
                    <div class="user-menu" id="userMenu">
                        <div class="user-menu-item" id="logoutButton">
                            <span>🚪</span>
                            Выйти
                        </div>
                    </div>
                </div>
            </div>

            <div class="main-content" id="mainContent">
                <div class="contacts-container" id="contactsContainer">
                    <!-- Контакты загружаются автоматически -->
                </div>

                <div class="chat-container" id="chatContainer">
                    <div class="chat-header">
                        <div class="contact-info">
                            <div class="contact-name" id="currentContactName">Выберите чат</div>
                            <div class="contact-status" id="currentContactStatus">Нажмите на контакт для начала общения</div>
                        </div>
                        <div class="call-buttons" id="callButtons" style="display: none;">
                            <!-- Кнопки звонков -->
                        </div>
                    </div>

                    <div class="message-input-container" id="messageInputContainer" style="display: none;">
                        <button class="btn-attach" id="attachButton" title="Прикрепить фото">
                            📎
                        </button>
                        <input type="text" class="message-input" id="messageInput" placeholder="Введите сообщение...">
                        <button class="btn-send" id="sendMessageBtn">
                            ➤
                        </button>
                    </div>

                    <div class="messages-container" id="messagesContainer">
                        <!-- Сообщения загружаются автоматически -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Окно звонка -->
    <div class="call-container" id="callContainer">
        <div class="remote-video-fullscreen">
            <video id="remoteVideo" autoplay playsinline></video>
        </div>
        <div class="local-video-pip" id="localVideoPip">
            <video id="localVideo" autoplay muted playsinline></video>
        </div>
        <div class="call-info-overlay">
            <h2 id="callType">Видеозвонок</h2>
            <p id="callContactName">Контакт</p>
            <p id="callStatus">Соединение...</p>
        </div>
        <div class="call-controls-overlay">
            <button class="call-btn btn-mute" id="muteBtn" title="Отключить микрофон">🎤</button>
            <button class="call-btn btn-switch-camera" id="switchCameraBtn" title="Сменить камеру">🔄</button>
            <button class="call-btn btn-quality" id="qualityBtn" title="Качество видео">⚙️</button>
            <button class="call-btn btn-end-call" id="endCallBtn" title="Завершить звонок">📞</button>
        </div>
        <div class="quality-selector-overlay" id="qualitySelectorOverlay">
            <button class="quality-btn-overlay" data-quality="low">Низкое (240p)</button>
            <button class="quality-btn-overlay" data-quality="medium">Среднее (480p)</button>
            <button class="quality-btn-overlay" data-quality="high">Высокое (720p)</button>
        </div>
    </div>

    <!-- Модальное окно для фото -->
    <div class="modal" id="photoModal">
        <div class="modal-content">
            <h3>Выберите фото</h3>
            <div class="modal-buttons">
                <button class="modal-btn btn-cancel" id="cancelPhoto">Отмена</button>
                <button class="modal-btn btn-confirm" id="takePhoto">Сделать фото</button>
                <button class="modal-btn btn-confirm" id="choosePhoto">Выбрать из галереи</button>
            </div>
        </div>
    </div>

    <!-- Индикатор загрузки -->
    <div class="loading" id="loadingIndicator">
        <div>Загрузка...</div>
    </div>

    <!-- Уведомление -->
    <div class="notification" id="notification"></div>

    <script>
        // ==================== НАСТРОЙКА СЕРВЕРА ====================
        const SERVER_URL = 'http://localhost:3000';
        
        // ==================== ПОДКЛЮЧЕНИЕ К СЕРВЕРУ ====================
        const socket = io(SERVER_URL);
        let isConnectedToServer = false;

        // События подключения
        socket.on('connect', () => {
            console.log('✅ Подключено к серверу');
            isConnectedToServer = true;
            updateConnectionStatus(true);
            showNotification('Подключено к серверу');
            
            if (currentUser) {
                socket.emit('register', {
                    username: currentUser.username,
                    name: currentUser.name,
                    avatar: currentUser.avatar
                });
            }
        });

        socket.on('disconnect', () => {
            console.log('❌ Отключено от сервера');
            isConnectedToServer = false;
            updateConnectionStatus(false);
            showNotification('Нет соединения с серверу');
        });

        function updateConnectionStatus(connected) {
            const statusElement = document.getElementById('connectionStatus');
            if (connected) {
                statusElement.textContent = '✅ Онлайн';
                statusElement.className = 'connection-status connected';
            } else {
                statusElement.textContent = '❌ Офлайн';
                statusElement.className = 'connection-status disconnected';
            }
        }

        // ==================== ДАННЫЕ ПОЛЬЗОВАТЕЛЕЙ ====================
        const predefinedUsers = {
            'vova': { name: 'Вова', avatar: 'В', password: '123', canCall: true },
            'nadya': { name: 'Надя', avatar: 'Н', password: '123', canCall: true },
            'dani4xde': { name: 'Dani4xde', avatar: 'Д', password: '123', canCall: true },
            'test': { name: 'Тест', avatar: 'Т', password: '123', canCall: false }
        };

        // ==================== СОСТОЯНИЕ ПРИЛОЖЕНИЯ ====================
        let currentUser = null;
        let currentContact = null;
        let isRegistering = false;
        let localStream = null;
        let remoteStream = null;
        let isCallActive = false;
        let isVideoCall = false;
        let currentCamera = 'user';
        let videoQuality = 'medium';
        let isQualityMenuOpen = false;
        let currentCallId = null;

        // ==================== ЭЛЕМЕНТЫ DOM ====================
        const authContainer = document.getElementById('authContainer');
        const messengerContainer = document.getElementById('messengerContainer');
        const authTitle = document.getElementById('authTitle');
        const passwordGroup = document.getElementById('passwordGroup');
        const confirmPasswordGroup = document.getElementById('confirmPasswordGroup');
        const authButton = document.getElementById('authButton');
        const authSwitch = document.getElementById('authSwitch');
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const userName = document.getElementById('userName');
        const userAvatar = document.getElementById('userAvatar');
        const contactsContainer = document.getElementById('contactsContainer');
        const currentContactName = document.getElementById('currentContactName');
        const currentContactStatus = document.getElementById('currentContactStatus');
        const callButtons = document.getElementById('callButtons');
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInputContainer = document.getElementById('messageInputContainer');
        const messageInput = document.getElementById('messageInput');
        const sendMessageBtn = document.getElementById('sendMessageBtn');
        const attachButton = document.getElementById('attachButton');
        const callContainer = document.getElementById('callContainer');
        const callType = document.getElementById('callType');
        const callContactName = document.getElementById('callContactName');
        const callStatus = document.getElementById('callStatus');
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        const qualitySelectorOverlay = document.getElementById('qualitySelectorOverlay');
        const muteBtn = document.getElementById('muteBtn');
        const switchCameraBtn = document.getElementById('switchCameraBtn');
        const qualityBtn = document.getElementById('qualityBtn');
        const endCallBtn = document.getElementById('endCallBtn');
        const notification = document.getElementById('notification');
        const photoModal = document.getElementById('photoModal');
        const cancelPhoto = document.getElementById('cancelPhoto');
        const takePhoto = document.getElementById('takePhoto');
        const choosePhoto = document.getElementById('choosePhoto');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const backButton = document.getElementById('backButton');
        const mainContent = document.getElementById('mainContent');
        const chatContainer = document.getElementById('chatContainer');
        const localVideoPip = document.getElementById('localVideoPip');
        const themeToggle = document.getElementById('themeToggle');
        const userMenu = document.getElementById('userMenu');
        const logoutButton = document.getElementById('logoutButton');

        // ==================== СОБЫТИЯ СЕРВЕРА ====================

        // Получение нового сообщения
        socket.on('newMessage', (data) => {
            console.log('📨 Новое сообщение:', data);
            const time = new Date(data.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            if (data.type === 'text') {
                addMessageToChat(data.message, data.from, time, 'delivered');
            } else if (data.type === 'call_notification') {
                addCallNotification(data.message, data.callId);
            }
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        // Подтверждение отправки сообщения
        socket.on('messageSent', (data) => {
            console.log('✅ Сообщение отправлено:', data);
            const messageElement = document.querySelector(`[data-message-id="${data.id}"]`);
            if (messageElement) {
                updateMessageStatus(messageElement, data.status);
            }
        });

        // История сообщений
        socket.on('messageHistory', (history) => {
            console.log('📚 История сообщений:', history);
            messagesContainer.innerHTML = '';
            history.forEach(msg => {
                const time = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                if (msg.type === 'text') {
                    addMessageToChat(msg.message, msg.from, time, msg.status);
                } else if (msg.type === 'call_notification') {
                    addCallNotification(msg.message, msg.callId);
                }
            });
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        // Входящий звонок - теперь показываем как сообщение
        socket.on('incomingCall', (data) => {
            console.log('📞 Входящий звонок:', data);
            
            // Отправляем уведомление о звонке как сообщение
            socket.emit('sendMessage', {
                to: currentUser.username,
                message: `${data.fromName} звонит вам ${data.isVideo ? 'с видео' : ''}. НАЖМИ НА ЭТОТ ТЕКСТ ЧТОБЫ ПРИНЯТЬ ВЫЗОВ`,
                type: 'call_notification',
                callData: data
            });
            
            showNotification(`Входящий звонок от ${data.fromName}`);
        });

        // Звонок принят
        socket.on('callAccepted', () => {
            console.log('✅ Звонок принят');
            callStatus.textContent = 'Соединение установлено';
            isCallActive = true;
        });

        // Звонок отклонен
        socket.on('callRejected', () => {
            console.log('❌ Звонок отклонен');
            showNotification('Звонок отклонен');
            endCall();
        });

        // Ошибка звонка
        socket.on('callFailed', (reason) => {
            console.log('❌ Ошибка звонка:', reason);
            showNotification(`Ошибка: ${reason}`);
            endCall();
        });

        // Завершение звонка
        socket.on('callEnded', () => {
            console.log('📞 Звонок завершен');
            showNotification('Звонок завершен');
            endCall();
        });

        // ==================== ФУНКЦИИ МЕССЕНДЖЕРА ====================

        // Показать уведомление
        function showNotification(message) {
            notification.textContent = message;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Переключение темы
        themeToggle.addEventListener('click', () => {
            isDarkTheme = !isDarkTheme;
            if (isDarkTheme) {
                document.documentElement.setAttribute('data-theme', 'dark');
                themeToggle.textContent = '☀️';
                localStorage.setItem('chattyTheme', 'dark');
            } else {
                document.documentElement.removeAttribute('data-theme');
                themeToggle.textContent = '🌙';
                localStorage.setItem('chattyTheme', 'light');
            }
        });

        // Выход из аккаунта
        logoutButton.addEventListener('click', () => {
            currentUser = null;
            localStorage.removeItem('chattyCurrentUser');
            messengerContainer.style.display = 'none';
            authContainer.style.display = 'flex';
            userMenu.classList.remove('active');
            usernameInput.value = '';
            passwordInput.value = '';
        });

        // Меню пользователя
        userAvatar.addEventListener('click', (e) => {
            e.stopPropagation();
            userMenu.classList.toggle('active');
        });

        document.addEventListener('click', () => {
            userMenu.classList.remove('active');
        });

        // Авторизация
        authSwitch.addEventListener('click', () => {
            isRegistering = !isRegistering;
            if (isRegistering) {
                authTitle.textContent = 'Регистрация в Chatty';
                authButton.textContent = 'Зарегистрироваться';
                authSwitch.textContent = 'Уже есть аккаунт? Войти';
                confirmPasswordGroup.style.display = 'block';
            } else {
                authTitle.textContent = 'Вход в Chatty';
                authButton.textContent = 'Войти';
                authSwitch.textContent = 'Нет аккаунта? Зарегистрироваться';
                confirmPasswordGroup.style.display = 'none';
            }
        });

        authButton.addEventListener('click', () => {
            const username = usernameInput.value.trim();
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!username) {
                showNotification('Введите имя пользователя');
                return;
            }

            if (!password) {
                showNotification('Введите пароль');
                return;
            }

            if (isRegistering) {
                if (password !== confirmPassword) {
                    showNotification('Пароли не совпадают');
                    return;
                }

                if (predefinedUsers[username.toLowerCase()]) {
                    showNotification('Пользователь с таким именем уже существует');
                    return;
                }

                predefinedUsers[username.toLowerCase()] = {
                    name: username,
                    avatar: username.charAt(0).toUpperCase(),
                    password: password,
                    canCall: true
                };

                showNotification('Регистрация успешна! Теперь вы можете войти.');
                isRegistering = false;
                authTitle.textContent = 'Вход в Chatty';
                authButton.textContent = 'Войти';
                authSwitch.textContent = 'Нет аккаунта? Зарегистрироваться';
                confirmPasswordGroup.style.display = 'none';
                confirmPasswordInput.value = '';
            } else {
                const user = predefinedUsers[username.toLowerCase()];
                if (!user || user.password !== password) {
                    showNotification('Неверное имя пользователя или пароль');
                    return;
                }

                currentUser = {
                    username: username.toLowerCase(),
                    name: user.name,
                    avatar: user.avatar,
                    password: password
                };

                localStorage.setItem('chattyCurrentUser', JSON.stringify(currentUser));
                authContainer.style.display = 'none';
                messengerContainer.style.display = 'flex';
                userName.textContent = currentUser.name;
                userAvatar.textContent = currentUser.avatar;

                if (isConnectedToServer) {
                    socket.emit('register', {
                        username: currentUser.username,
                        name: currentUser.name,
                        avatar: currentUser.avatar
                    });
                }

                loadContacts();
            }
        });

        // Загрузка контактов
        function loadContacts() {
            contactsContainer.innerHTML = '';
            Object.keys(predefinedUsers).forEach(username => {
                if (username !== currentUser.username) {
                    const user = predefinedUsers[username];
                    const contactElement = document.createElement('div');
                    contactElement.className = 'contact';
                    contactElement.dataset.username = username;
                    contactElement.innerHTML = `
                        <div class="contact-avatar">${user.avatar}</div>
                        <div class="contact-info">
                            <div class="contact-name">${user.name}</div>
                            <div class="contact-status">@${username}</div>
                        </div>
                    `;
                    contactElement.addEventListener('click', () => selectContact(username));
                    contactsContainer.appendChild(contactElement);
                }
            });
        }

        // Выбор контакта
        function selectContact(username) {
            document.querySelectorAll('.contact').forEach(contact => {
                contact.classList.remove('active');
            });
            
            const contactElement = document.querySelector(`.contact[data-username="${username}"]`);
            if (contactElement) {
                contactElement.classList.add('active');
            }
            
            currentContact = predefinedUsers[username];
            currentContactName.textContent = currentContact.name;
            currentContactStatus.textContent = '@' + username;
            
            messageInputContainer.style.display = 'flex';
            callButtons.style.display = 'flex';
            callButtons.innerHTML = '';
            
            if (currentContact.canCall) {
                callButtons.innerHTML = `
                    <button class="btn-call" id="voiceCallBtn">📞</button>
                    <button class="btn-call" id="videoCallBtn">📹</button>
                `;
                document.getElementById('voiceCallBtn').addEventListener('click', () => initiateCall(false));
                document.getElementById('videoCallBtn').addEventListener('click', () => initiateCall(true));
            } else {
                callButtons.innerHTML = '<span style="color: var(--text-secondary); font-size: 0.9rem;">Звонки недоступны</span>';
            }
            
            if (window.innerWidth <= 600) {
                mainContent.classList.add('chat-active');
            }
            
            messagesContainer.innerHTML = '';
        }

        // Отправка сообщения
        function sendMessage() {
            const text = messageInput.value.trim();
            if (!text || !currentContact) return;
            
            if (!isConnectedToServer) {
                showNotification('Нет подключения к серверу');
                return;
            }

            const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const tempId = Date.now().toString();
            
            const messageElement = addMessageToChat(text, currentUser.username, time, 'sending', tempId);
            
            socket.emit('sendMessage', {
                to: Object.keys(predefinedUsers).find(u => predefinedUsers[u].name === currentContact.name),
                message: text,
                type: 'text'
            });
            
            messageInput.value = '';
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        sendMessageBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        // Добавление сообщения в чат
        function addMessageToChat(text, sender, time, status = 'sent', messageId = null) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${sender === currentUser.username ? 'sent' : 'received'}`;
            
            if (messageId) {
                messageElement.dataset.messageId = messageId;
            }
            
            const statusIcon = getStatusIcon(status);
            messageElement.innerHTML = `
                <div class="message-text">${text}</div>
                <div class="message-time">${time}${sender === currentUser.username ? `<span class="message-status">${statusIcon}</span>` : ''}</div>
            `;
            
            messagesContainer.appendChild(messageElement);
            return messageElement;
        }

        // Добавление уведомления о звонке
        function addCallNotification(message, callId) {
            const notificationElement = document.createElement('div');
            notificationElement.className = 'call-notification';
            notificationElement.innerHTML = `
                <div>${message}</div>
            `;
            
            notificationElement.addEventListener('click', () => {
                // Принимаем звонок при клике на уведомление
                currentCallId = callId;
                socket.emit('acceptCall', { callId: callId });
                
                // Начинаем звонок
                isVideoCall = true; // Предполагаем видеозвонок
                callContainer.className = `call-container ${isVideoCall ? 'video-call' : 'voice-call'}`;
                callType.textContent = isVideoCall ? 'Видеозвонок' : 'Аудиозвонок';
                callContactName.textContent = 'Собеседник';
                callStatus.textContent = 'Подключение...';
                callContainer.style.display = 'flex';
                
                startCall();
            });
            
            messagesContainer.appendChild(notificationElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Статусы сообщений
        function getStatusIcon(status) {
            switch(status) {
                case 'sending': return '•••';
                case 'sent': return '✓';
                case 'delivered': return '✓✓';
                case 'read': return '✓✓';
                default: return '✓';
            }
        }

        function updateMessageStatus(messageElement, newStatus) {
            const statusElement = messageElement.querySelector('.message-status');
            if (statusElement) {
                statusElement.textContent = getStatusIcon(newStatus);
            }
        }

        // ==================== ФУНКЦИИ ЗВОНКОВ ====================

        // Инициализация звонка
        function initiateCall(isVideo) {
            if (!currentContact || !isConnectedToServer) {
                showNotification('Нет подключения к серверу');
                return;
            }
            
            // Отправляем запрос на звонок
            socket.emit('startCall', {
                to: Object.keys(predefinedUsers).find(u => predefinedUsers[u].name === currentContact.name),
                isVideo: isVideo
            });
            
            // Показываем окно звонка инициатору
            isVideoCall = isVideo;
            callContainer.className = `call-container ${isVideo ? 'video-call' : 'voice-call'}`;
            callType.textContent = isVideo ? 'Видеозвонок' : 'Аудиозвонок';
            callContactName.textContent = currentContact.name;
            callStatus.textContent = 'Звонок...';
            callContainer.style.display = 'flex';
            closeQualityMenu();
            
            // Начинаем звонок для инициатора
            startCall();
            
            // Таймаут
            setTimeout(() => {
                if (callStatus.textContent === 'Звонок...') {
                    showNotification('Пользователь не отвечает');
                    endCall();
                }
            }, 30000);
        }

        // Начало звонка
        async function startCall() {
            try {
                const constraints = {
                    audio: true,
                    video: isVideoCall ? {
                        facingMode: currentCamera,
                        width: { ideal: getVideoQuality().width },
                        height: { ideal: getVideoQuality().height },
                        frameRate: { ideal: getVideoQuality().frameRate }
                    } : false
                };
                
                localStream = await navigator.mediaDevices.getUserMedia(constraints);
                
                if (isVideoCall) {
                    localVideo.srcObject = localStream;
                    initPipDragging();
                }
                
                // Имитация успешного соединения
                setTimeout(() => {
                    if (isCallActive || currentCallId) {
                        callStatus.textContent = 'Соединение установлено';
                        isCallActive = true;
                    }
                }, 2000);
                
            } catch (error) {
                console.error('Ошибка доступа к медиаустройствам:', error);
                showNotification('Не удалось получить доступ к камере/микрофону');
                endCall();
            }
        }

        // Перетаскивание PIP
        function initPipDragging() {
            let pipDragging = false;
            let pipOffsetX = 0;
            let pipOffsetY = 0;
            
            localVideoPip.addEventListener('mousedown', startDrag);
            localVideoPip.addEventListener('touchstart', startDrag);
            
            function startDrag(e) {
                pipDragging = true;
                const rect = localVideoPip.getBoundingClientRect();
                pipOffsetX = (e.clientX || e.touches[0].clientX) - rect.left;
                pipOffsetY = (e.clientY || e.touches[0].clientY) - rect.top;
                document.addEventListener('mousemove', doDrag);
                document.addEventListener('touchmove', doDrag);
                document.addEventListener('mouseup', stopDrag);
                document.addEventListener('touchend', stopDrag);
            }
            
            function doDrag(e) {
                if (!pipDragging) return;
                e.preventDefault();
                const x = (e.clientX || e.touches[0].clientX) - pipOffsetX;
                const y = (e.clientY || e.touches[0].clientY) - pipOffsetY;
                const maxX = window.innerWidth - localVideoPip.offsetWidth;
                const maxY = window.innerHeight - localVideoPip.offsetHeight;
                localVideoPip.style.left = Math.max(0, Math.min(x, maxX)) + 'px';
                localVideoPip.style.top = Math.max(0, Math.min(y, maxY)) + 'px';
                localVideoPip.style.right = 'auto';
            }
            
            function stopDrag() {
                pipDragging = false;
                document.removeEventListener('mousemove', doDrag);
                document.removeEventListener('touchmove', doDrag);
                document.removeEventListener('mouseup', stopDrag);
                document.removeEventListener('touchend', stopDrag);
            }
        }

        // Качество видео
        function getVideoQuality() {
            switch (videoQuality) {
                case 'low': return { width: 426, height: 240, frameRate: 25 };
                case 'medium': return { width: 854, height: 480, frameRate: 30 };
                case 'high': return { width: 1280, height: 720, frameRate: 30 };
                default: return { width: 854, height: 480, frameRate: 30 };
            }
        }

        // Смена камеры
        switchCameraBtn.addEventListener('click', async () => {
            if (!isVideoCall || !localStream) return;
            
            localStream.getTracks().forEach(track => track.stop());
            currentCamera = currentCamera === 'user' ? 'environment' : 'user';
            
            try {
                const constraints = {
                    audio: true,
                    video: {
                        facingMode: currentCamera,
                        width: { ideal: getVideoQuality().width },
                        height: { ideal: getVideoQuality().height },
                        frameRate: { ideal: getVideoQuality().frameRate }
                    }
                };
                
                localStream = await navigator.mediaDevices.getUserMedia(constraints);
                localVideo.srcObject = localStream;
            } catch (error) {
                console.error('Ошибка переключения камеры:', error);
                showNotification('Не удалось переключить камеру');
            }
        });

        // Меню качества
        qualityBtn.addEventListener('click', toggleQualityMenu);

        function toggleQualityMenu() {
            isQualityMenuOpen = !isQualityMenuOpen;
            if (isQualityMenuOpen) {
                callContainer.classList.add('quality-menu-open');
                qualityBtn.style.backgroundColor = 'var(--primary-color)';
            } else {
                closeQualityMenu();
            }
        }

        function closeQualityMenu() {
            isQualityMenuOpen = false;
            callContainer.classList.remove('quality-menu-open');
            qualityBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        }

        // Выбор качества
        document.querySelectorAll('.quality-btn-overlay').forEach(btn => {
            btn.addEventListener('click', () => {
                if (!isVideoCall) return;
                
                document.querySelectorAll('.quality-btn-overlay').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                videoQuality = btn.dataset.quality;
                closeQualityMenu();
                
                if (localStream) {
                    localStream.getVideoTracks().forEach(track => track.stop());
                    const constraints = {
                        audio: true,
                        video: {
                            facingMode: currentCamera,
                            width: { ideal: getVideoQuality().width },
                            height: { ideal: getVideoQuality().height },
                            frameRate: { ideal: getVideoQuality().frameRate }
                        }
                    };
                    
                    navigator.mediaDevices.getUserMedia(constraints)
                        .then(stream => {
                            localStream = stream;
                            localVideo.srcObject = localStream;
                        })
                        .catch(error => {
                            console.error('Ошибка изменения качества:', error);
                            showNotification('Не удалось изменить качество видео');
                        });
                }
            });
        });

        // Отключение микрофона
        let isMuted = false;
        muteBtn.addEventListener('click', () => {
            if (!localStream) return;
            
            const audioTracks = localStream.getAudioTracks();
            if (audioTracks.length > 0) {
                isMuted = !isMuted;
                audioTracks[0].enabled = !isMuted;
                muteBtn.innerHTML = isMuted ? '🔇' : '🎤';
            }
        });

        // Завершение звонка
        function endCall() {
            if (currentCallId) {
                socket.emit('endCall', { callId: currentCallId });
            }
            
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            
            closeQualityMenu();
            isCallActive = false;
            isVideoCall = false;
            currentCallId = null;
            
            callContainer.style.display = 'none';
            callContainer.className = 'call-container';
            
            localVideo.srcObject = null;
            muteBtn.innerHTML = '🎤';
            isMuted = false;
            qualityBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
            
            localVideoPip.style.top = '80px';
            localVideoPip.style.right = '20px';
            localVideoPip.style.left = 'auto';
        }

        endCallBtn.addEventListener('click', endCall);

        // ==================== ИНИЦИАЛИЗАЦИЯ ====================

        // Восстановление темы
        window.addEventListener('load', () => {
            const savedUser = localStorage.getItem('chattyCurrentUser');
            const savedTheme = localStorage.getItem('chattyTheme');
            
            if (savedUser) {
                const user = JSON.parse(savedUser);
                if (predefinedUsers[user.username] && predefinedUsers[user.username].password === user.password) {
                    currentUser = user;
                    authContainer.style.display = 'none';
                    messengerContainer.style.display = 'flex';
                    userName.textContent = currentUser.name;
                    userAvatar.textContent = currentUser.avatar;
                    loadContacts();
                }
            }
            
            if (savedTheme === 'dark') {
                isDarkTheme = true;
                document.documentElement.setAttribute('data-theme', 'dark');
                themeToggle.textContent = '☀️';
            }
            
            if (window.innerWidth <= 600) {
                backButton.style.display = 'flex';
            }
            
            updateConnectionStatus(false);
        });

        // Адаптивность
        window.addEventListener('resize', () => {
            if (window.innerWidth > 600) {
                mainContent.classList.remove('chat-active');
                backButton.style.display = 'none';
            } else if (currentContact) {
                backButton.style.display = 'flex';
            }
        });

        // Кнопка назад
        backButton.addEventListener('click', () => {
            mainContent.classList.remove('chat-active');
        });

        // Функции для фото
        attachButton.addEventListener('click', () => {
            if (!currentContact) {
                showNotification('Выберите контакт');
                return;
            }
            photoModal.style.display = 'flex';
        });

        cancelPhoto.addEventListener('click', () => {
            photoModal.style.display = 'none';
        });

        takePhoto.addEventListener('click', () => {
            photoModal.style.display = 'none';
            showNotification('Функция в разработке');
        });

        choosePhoto.addEventListener('click', () => {
            photoModal.style.display = 'none';
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);
            fileInput.click();
            
            fileInput.addEventListener('change', (e) => {
                if (e.target.files && e.target.files[0]) {
                    loadingIndicator.style.display = 'flex';
                    setTimeout(() => {
                        const file = e.target.files[0];
                        const imageUrl = URL.createObjectURL(file);
                        const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                        
                        const messageElement = addImageToChat(imageUrl, currentUser.username, time, 'sending', Date.now().toString());
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        
                        socket.emit('sendMessage', {
                            to: Object.keys(predefinedUsers).find(u => predefinedUsers[u].name === currentContact.name),
                            message: imageUrl,
                            type: 'image'
                        });
                        
                        loadingIndicator.style.display = 'none';
                    }, 1000);
                }
                document.body.removeChild(fileInput);
            });
        });

        // Добавление изображения в чат
        function addImageToChat(imageUrl, sender, time, status = 'sent', messageId = null) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${sender === currentUser.username ? 'sent' : 'received'}`;
            
            if (messageId) {
                messageElement.dataset.messageId = messageId;
            }
            
            const statusIcon = getStatusIcon(status);
            messageElement.innerHTML = `
                <div class="message-text">${sender === currentUser.username ? 'Вы отправили фото' : 'Отправил(а) фото'}</div>
                <img src="${imageUrl}" alt="Фото" class="message-image">
                <div class="message-time">${time}${sender === currentUser.username ? `<span class="message-status">${statusIcon}</span>` : ''}</div>
            `;
            
            messagesContainer.appendChild(messageElement);
            return messageElement;
        }

        // ESC для выхода из звонка
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && isCallActive) {
                endCall();
            }
        });
    </script>
</body>
</html>
